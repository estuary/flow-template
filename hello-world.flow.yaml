collections:
  people:
    schema:
      type: object
      properties:
        name: {type: string}
      required: [name]
    key: [/name]

  greetings:
    schema:
      type: object
      properties:
        message: {type: string}
      required: [message]
    key: [/message]
    derivation:
      transform: 
        sayHello:
          source:
            name: people
          publish: 
            lambda: typescript

endpoints: 
  # Defines a sqlite endpoint, which is nice for local development
  devSQLite:
    sqlite:
      path: hello-world.db
          
materializations: 
  # Binds the greetings collection to the devSQLite endpoint, which will be
  # updated in realtime as documents are added to the collection.
  - source:
      name: greetings
    endpoint:
      name: devSQLite
      config: 
        table: hello_world
      
tests:
  'test greeting':
    # Adds documents to the people collection
    - ingest:
        collection: people
        documents:
          - { name: Alice }
          - { name: Bobby }
          - { name: Samus }
    # Asserts that the complete set of greetings documents matches these documents.
    - verify:
        collection: greetings
        documents:
          - {message: 'Hello Alice!'}
          - {message: 'Hello Bobby!'}
          - {message: 'Hello Samus!'}
